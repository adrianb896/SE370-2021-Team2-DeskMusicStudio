package snestrackplayer;

import jaco.mp3.player.MP3Player;
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Paths;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.Line;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.Mixer;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author adrian
 * 
 */

public class snesplayerframe extends javax.swing.JFrame {

    /**
     * Creates new form snesplayerframe
     */
    
    // defining jar file class
    MP3Player player;
    // defining file for track
    File songFile;
    // defining current command line directories
    String currentDirectory = "home.user";
    // application class is created 
    String currentPath;
    // defining string variable for image name
    String imagePath;
    // defining string variable for application name 
    String applicationName = "SNES Music Editor";
    
    // if statement is false, button interaction will not repeat
    boolean repeat = false;
    
    // boolean for windowCollasped
    boolean windowCollasped = false;
    
    // creating two integers for mouse x and y depending on position on display
    int xM, yM;
    
    
    public snesplayerframe() {
        initComponents();
        // declaring application title
        apptitle.setText(applicationName);
        
        // calling for song file
        songFile = new File("/Users/adrian/Downloads/SNES music");
        
        // declare string for file name
        String fileName = songFile.getName();
        songNameDisplay.setText(fileName);
        
        // playmusic method
        player = mp3Player();
        // loading song to track view
        player.addToPlayList(songFile);
        
        // current path in terms of strings
        currentPath = Paths.get(".").toAbsolutePath().normalize().toString();
        imagePath = "\\images";
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        headerPanel = new javax.swing.JPanel();
        apptitle = new javax.swing.JLabel();
        quitBtn = new javax.swing.JLabel();
        settingBtn = new javax.swing.JLabel();
        songNameMainPanel = new javax.swing.JPanel();
        songNameSubPanel = new javax.swing.JPanel();
        songNameDisplay = new javax.swing.JLabel();
        controlPanel = new javax.swing.JPanel();
        repeatBtn = new javax.swing.JLabel();
        pauseBtn = new javax.swing.JLabel();
        playBtn = new javax.swing.JLabel();
        stopBtn = new javax.swing.JLabel();
        openBtn = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        volumedownBtn = new javax.swing.JLabel();
        volumeupBtn = new javax.swing.JLabel();
        volumefullBtn = new javax.swing.JLabel();
        muteBtn = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 492));

        jPanel1.setBackground(new java.awt.Color(199, 199, 199));

        headerPanel.setBackground(new java.awt.Color(0, 0, 0));
        headerPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 250, 250), 1, true));

        apptitle.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        apptitle.setForeground(new java.awt.Color(102, 250, 250));
        apptitle.setText("SNES Music Editor");
        apptitle.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                apptitleMouseDragged(evt);
            }
        });
        apptitle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                apptitleMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                apptitleMousePressed(evt);
            }
        });

        quitBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        quitBtn.setForeground(new java.awt.Color(102, 250, 250));
        quitBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        quitBtn.setText("Quit");
        quitBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quitBtnMouseClicked(evt);
            }
        });

        settingBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        settingBtn.setForeground(new java.awt.Color(102, 250, 250));
        settingBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        settingBtn.setText("Settings");
        settingBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                settingBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(apptitle, javax.swing.GroupLayout.DEFAULT_SIZE, 806, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(apptitle, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                    .addComponent(settingBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(quitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        songNameMainPanel.setBackground(new java.awt.Color(199, 199, 199));

        songNameSubPanel.setBackground(new java.awt.Color(60, 60, 60));
        songNameSubPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 250, 250), 1, true));

        songNameDisplay.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        songNameDisplay.setForeground(new java.awt.Color(102, 250, 250));
        songNameDisplay.setText("Playing");
        songNameDisplay.setMaximumSize(new java.awt.Dimension(50, 16));
        songNameDisplay.setMinimumSize(new java.awt.Dimension(50, 16));

        javax.swing.GroupLayout songNameSubPanelLayout = new javax.swing.GroupLayout(songNameSubPanel);
        songNameSubPanel.setLayout(songNameSubPanelLayout);
        songNameSubPanelLayout.setHorizontalGroup(
            songNameSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(songNameSubPanelLayout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(songNameDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(785, Short.MAX_VALUE))
        );
        songNameSubPanelLayout.setVerticalGroup(
            songNameSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(songNameSubPanelLayout.createSequentialGroup()
                .addComponent(songNameDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout songNameMainPanelLayout = new javax.swing.GroupLayout(songNameMainPanel);
        songNameMainPanel.setLayout(songNameMainPanelLayout);
        songNameMainPanelLayout.setHorizontalGroup(
            songNameMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, songNameMainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(songNameSubPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        songNameMainPanelLayout.setVerticalGroup(
            songNameMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(songNameMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(songNameSubPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        controlPanel.setBackground(new java.awt.Color(199, 199, 199));
        controlPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 250, 250), 1, true));

        repeatBtn.setForeground(new java.awt.Color(102, 250, 250));
        repeatBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        repeatBtn.setIcon(new javax.swing.ImageIcon("/Users/adrian/Desktop/snestrackicons/repeatBtn.png")); // NOI18N
        repeatBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                repeatBtnMouseClicked(evt);
            }
        });

        pauseBtn.setForeground(new java.awt.Color(102, 250, 250));
        pauseBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pauseBtn.setIcon(new javax.swing.ImageIcon("/Users/adrian/Desktop/snestrackicons/pauseBtn.png")); // NOI18N
        pauseBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pauseBtnMouseClicked(evt);
            }
        });

        playBtn.setForeground(new java.awt.Color(102, 250, 250));
        playBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playBtn.setIcon(new javax.swing.ImageIcon("/Users/adrian/Desktop/snestrackicons/playBtn.png")); // NOI18N
        playBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playBtnMouseClicked(evt);
            }
        });

        stopBtn.setForeground(new java.awt.Color(102, 250, 250));
        stopBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stopBtn.setIcon(new javax.swing.ImageIcon("/Users/adrian/Desktop/snestrackicons/stopBtn.png")); // NOI18N
        stopBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopBtnMouseClicked(evt);
            }
        });

        openBtn.setForeground(new java.awt.Color(102, 250, 250));
        openBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        openBtn.setIcon(new javax.swing.ImageIcon("/Users/adrian/Desktop/snestrackicons/openBtn.png")); // NOI18N
        openBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openBtnMouseClicked(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(102, 250, 250));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        volumedownBtn.setForeground(new java.awt.Color(102, 250, 250));
        volumedownBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        volumedownBtn.setIcon(new javax.swing.ImageIcon("/Users/adrian/Desktop/snestrackicons/volumedownBtn.png")); // NOI18N
        volumedownBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                volumedownBtnMouseClicked(evt);
            }
        });

        volumeupBtn.setForeground(new java.awt.Color(102, 250, 250));
        volumeupBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        volumeupBtn.setIcon(new javax.swing.ImageIcon("/Users/adrian/Desktop/snestrackicons/volumeupBtn.png")); // NOI18N
        volumeupBtn.setToolTipText("");
        volumeupBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                volumeupBtnMouseClicked(evt);
            }
        });

        volumefullBtn.setForeground(new java.awt.Color(102, 250, 250));
        volumefullBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        volumefullBtn.setIcon(new javax.swing.ImageIcon("/Users/adrian/Desktop/snestrackicons/volumefullBtn.png")); // NOI18N
        volumefullBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                volumefullBtnMouseClicked(evt);
            }
        });

        muteBtn.setForeground(new java.awt.Color(102, 250, 250));
        muteBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        muteBtn.setIcon(new javax.swing.ImageIcon("/Users/adrian/Desktop/snestrackicons/muteBtn.png")); // NOI18N
        muteBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                muteBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(repeatBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pauseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(stopBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(volumedownBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(volumeupBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(volumefullBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(muteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                                .addGap(0, 8, Short.MAX_VALUE)
                                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pauseBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                                    .addComponent(repeatBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(playBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(stopBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(openBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())
                    .addComponent(volumedownBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(volumeupBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(volumefullBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(muteBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 971, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(songNameMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(songNameMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void playBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playBtnMouseClicked
        // TODO add your handling code here:
        player.play();
    }//GEN-LAST:event_playBtnMouseClicked

    private void stopBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopBtnMouseClicked
        // TODO add your handling code here:
        player.stop();
    }//GEN-LAST:event_stopBtnMouseClicked

    private void pauseBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pauseBtnMouseClicked
        // TODO add your handling code here:
        player.pause();
    }//GEN-LAST:event_pauseBtnMouseClicked

    private void repeatBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_repeatBtnMouseClicked
        // TODO add your handling code here:
        if (repeat == false) {
            repeat = true;
            player.setRepeat(repeat);
            
          String image = currentPath + imagePath + "\\repeatBtn.png";
          repeatBtn.setIcon(new ImageIcon(image));       
        } 
        else if (repeat == true) {
            repeat = false;
            player.setRepeat(repeat);
            
            String image = currentPath + imagePath + "\\repeat.png";
            repeatBtn.setIcon(new ImageIcon(image));
        }
    }//GEN-LAST:event_repeatBtnMouseClicked

    private void apptitleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apptitleMousePressed
        // TODO add your handling code here:
        xM = evt.getX();
        yM = evt.getY();
    }//GEN-LAST:event_apptitleMousePressed

    private void apptitleMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apptitleMouseDragged
        // TODO add your handling code here:
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        
        this.setLocation(x - xM, y - yM);
    }//GEN-LAST:event_apptitleMouseDragged

    private void quitBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quitBtnMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_quitBtnMouseClicked

    private void settingBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingBtnMouseClicked
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Settings dialog will display here");
    }//GEN-LAST:event_settingBtnMouseClicked

    private void openBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openBtnMouseClicked
        // TODO add your handling code here:
            JFileChooser openfileChooser = new JFileChooser(currentDirectory);
            openfileChooser.setFileFilter(new FileTypeFilter(".mp3", "Mp3 file only"));
            int result = openfileChooser.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                songFile = openfileChooser.getSelectedFile();
                player.addToPlayList(songFile);
                player.skipForward();
                currentDirectory = songFile.getAbsolutePath();
                songNameDisplay.setText("Playing Now...  " + songFile.getName());
            }
            
    }//GEN-LAST:event_openBtnMouseClicked

    private void apptitleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apptitleMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            if (windowCollasped == false) {
                windowCollasped = true;
                this.setSize(new Dimension(this.getSize().width, 50));
                
                apptitle.setFont(new Font(".AppleSystemUIFont", 0, 12));
                apptitle.setText("Playing Now...  " + songFile.getName());
            } else if (windowCollasped == true) {
                windowCollasped = false;
                this.setSize(new Dimension(this.getSize().width, 250));
                
                apptitle.setFont(new Font(".AppleSystemUIFont", 0, 10));
                apptitle.setText(applicationName);
            }
        }
    }//GEN-LAST:event_apptitleMouseClicked

    private void volumedownBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volumedownBtnMouseClicked
        // TODO add your handling code here:
        volumedownControl(0.1);
    }//GEN-LAST:event_volumedownBtnMouseClicked

    private void volumeupBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volumeupBtnMouseClicked
        // TODO add your handling code here:
        volumeupControl(0.1);
    }//GEN-LAST:event_volumeupBtnMouseClicked

    private void volumefullBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volumefullBtnMouseClicked
        // TODO add your handling code here:
        volumeControl(1.0);
    }//GEN-LAST:event_volumefullBtnMouseClicked

    private void muteBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_muteBtnMouseClicked
        // TODO add your handling code here:
        volumeControl(0.0);
    }//GEN-LAST:event_muteBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Set the Nimbus look and feel
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(snesplayerframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(snesplayerframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(snesplayerframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(snesplayerframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new snesplayerframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel apptitle;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel muteBtn;
    private javax.swing.JLabel openBtn;
    private javax.swing.JLabel pauseBtn;
    private javax.swing.JLabel playBtn;
    private javax.swing.JLabel quitBtn;
    private javax.swing.JLabel repeatBtn;
    private javax.swing.JLabel settingBtn;
    private javax.swing.JLabel songNameDisplay;
    private javax.swing.JPanel songNameMainPanel;
    private javax.swing.JPanel songNameSubPanel;
    private javax.swing.JLabel stopBtn;
    private javax.swing.JLabel volumedownBtn;
    private javax.swing.JLabel volumefullBtn;
    private javax.swing.JLabel volumeupBtn;
    // End of variables declaration//GEN-END:variables

    // custom private declaration for mp3 method
    private MP3Player mp3Player() {
        MP3Player mp3Player = new MP3Player();
        return mp3Player;
    }
    
    // custom private declaration for lowering volume
    private void volumedownControl(Double valueToPlusMinus) {
        // calling for mixer information in AudioSystem
        Mixer.Info[] mixers = AudioSystem.getMixerInfo();
        // for loop to list all mixers
        for (Mixer.Info mixerInfo : mixers) {
            // get mixer
            Mixer mixer = AudioSystem.getMixer(mixerInfo);
            // calling for target line
            Line.Info[] lineInfos = mixer.getTargetLineInfo();
            // for loop to list target lines
            for (Line.Info lineInfo : lineInfos) {
                // starts at index
                Line line = null;
                boolean opened = true;
               // try-catch method
               try {
                   line = mixer.getLine(lineInfo);
                   opened = line.isOpen() || line instanceof Clip;
                   // if statement
                   if (!opened) {
                       line.open(); // void
                   }
                   // float variable for volume control
                   FloatControl volumeControl = (FloatControl) line.getControl(FloatControl.Type.VOLUME);
                   // current volume control
                   float currentVolume = volumeControl.getValue();
                   // double variable to store valuePlusMinus
                   Double volumeToCut = valueToPlusMinus;
                   // float variable to determine volume level increase or decrease
                   float changedCalc = (float) ((float)currentVolume - (double)volumeToCut);
                   volumeControl.setValue(changedCalc);
               } catch (LineUnavailableException lineException) {
               
               } catch (IllegalArgumentException illException) {
               
               } finally {
                   // close line if it is open
                   if (line != null && !opened) {
                       line.close();
                   }
               }
                
            }
        }
    }
    // custom private declaration for increasing volume
    private void volumeupControl(Double valueToPlusMinus) {
        // calling for mixer information in AudioSystem
        Mixer.Info[] mixers = AudioSystem.getMixerInfo();
        // for loop to list all mixers
        for (Mixer.Info mixerInfo : mixers) {
            // get mixer
            Mixer mixer = AudioSystem.getMixer(mixerInfo);
            // calling for target line
            Line.Info[] lineInfos = mixer.getTargetLineInfo();
            // for loop to list target lines
            for (Line.Info lineInfo : lineInfos) {
                // starts at index
                Line line = null;
                boolean opened = true;
               // try-catch method
               try {
                   line = mixer.getLine(lineInfo);
                   opened = line.isOpen() || line instanceof Clip;
                   // if statement
                   if (!opened) {
                       line.open(); // void
                   }
                   // float variable for volume control
                   FloatControl volumeControl = (FloatControl) line.getControl(FloatControl.Type.VOLUME);
                   // current volume control
                   float currentVolume = volumeControl.getValue();
                   // double variable to store valuePlusMinus
                   Double volumeToCut = valueToPlusMinus;
                   // float variable to determine volume level increase or decrease
                   float changedCalc = (float) ((float)currentVolume + (double)volumeToCut);
                   volumeControl.setValue(changedCalc);
               } catch (LineUnavailableException lineException) {
               
               } catch (IllegalArgumentException illException) {
               
               } finally {
                   // close line if it is open
                   if (line != null && !opened) {
                       line.close();
                   }
               }
                
            }
        }
    }
    // custom private declaration volume in general
    private void volumeControl(Double valueToPlusMinus) {
        // calling for mixer information in AudioSystem
        Mixer.Info[] mixers = AudioSystem.getMixerInfo();
        // for loop to list all mixers
        for (Mixer.Info mixerInfo : mixers) {
            // get mixer
            Mixer mixer = AudioSystem.getMixer(mixerInfo);
            // calling for target line
            Line.Info[] lineInfos = mixer.getTargetLineInfo();
            // for loop to list target lines
            for (Line.Info lineInfo : lineInfos) {
                // starts at index
                Line line = null;
                boolean opened = true;
               // try-catch method
               try {
                   line = mixer.getLine(lineInfo);
                   opened = line.isOpen() || line instanceof Clip;
                   // if statement
                   if (!opened) {
                       line.open(); // void
                   }
                   // float variable for volume control
                   FloatControl volumeControl = (FloatControl) line.getControl(FloatControl.Type.VOLUME);
                   // current volume control
                   float currentVolume = volumeControl.getValue();
                   // double variable to store valuePlusMinus
                   Double volumeToCut = valueToPlusMinus;
                   // float variable to determine volume level increase or decrease
                   float changedCalc = (float) ((double)volumeToCut);
                   volumeControl.setValue(changedCalc);
               } catch (LineUnavailableException lineException) {
               
               } catch (IllegalArgumentException illException) {
               
               } finally {
                   // close line if it is open
                   if (line != null && !opened) {
                       line.close();
                   }
               }
                
            }
        }
    }
}
