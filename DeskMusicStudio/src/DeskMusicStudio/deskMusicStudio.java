package DeskMusicStudio;

import jaco.mp3.player.MP3Player;
import org.jfugue.player.Player;
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.io.FileWriter;
import java.nio.file.Paths;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.Line;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.Mixer;
import javax.swing.*;

/**
 * @author adrian & christian 
 **/
// Piano, Guitar, Violin, Banjo
public class deskMusicStudio extends javax.swing.JFrame {

    // defining jar file class
    MP3Player user;
    // defining file for track
    File songFile;
    // defining current command line directories
    String currentDirectory = "home.user";
    // application class is created 
    String currentPath;
    // defining string variable for image name
    String imagePath;
    // defining string variable for application name 
    String applicationName = "Desk Music Studio";
    //defining jar file class
    Player player = new Player();
    
    JLayeredPane panel = new JLayeredPane();
    
    // if statement is false, button interaction will not repeat
    boolean repeat = false;
    
    // boolean for windowCollasped
    boolean windowCollasped = false;
    
    // creating two integers for mouse x and y depending on position on display
    int xM, yM;
    
    
    public deskMusicStudio() {
        initComponents();
        // declaring application title
        apptitle.setText(applicationName);
        
        // calling for song file
        songFile = new File("/Users/adrian/Downloads/ ");
        
        
        // declare string for file name
        String fileName = songFile.getName();
        songNameDisplay.setText(fileName);
        
        
        // playmusic method
        user = mp3Player();
        // loading song to track view
        user.addToPlayList(songFile);
        
        // current path in terms of strings
        currentPath = Paths.get(".").toAbsolutePath().normalize().toString();
        imagePath = "\\images";
        
        cKey.add(panel);
        dKey.add(panel);
        eKey.add(panel);
        fKey.add(panel);
        gKey.add(panel);
        aKey.add(panel);
        bKey.add(panel);
        highCKey.add(panel);
        cSharp.add(panel);
        dSharp.add(panel);
        fSharp.add(panel);
        gSharp.add(panel);
        aSharp.add(panel);
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     **/
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        jPanel1 = new javax.swing.JPanel();
        headerPanel = new javax.swing.JPanel();
        apptitle = new javax.swing.JLabel();
        quitBtn = new javax.swing.JLabel();
        settingBtn = new javax.swing.JLabel();
        TrackViewName = new javax.swing.JLabel();
        songNameMainPanel = new javax.swing.JPanel();
        songNameSubPanel = new javax.swing.JPanel();
        songNameDisplay = new javax.swing.JLabel();
        controlPanel = new javax.swing.JPanel();
        loadBtn = new javax.swing.JLabel();
        repeatBtn = new javax.swing.JLabel();
        playBtn = new javax.swing.JLabel();
        pauseBtn = new javax.swing.JLabel();
        stopBtn = new javax.swing.JLabel();
        volumedownBtn = new javax.swing.JLabel();
        volumeupBtn = new javax.swing.JLabel();
        volumefullBtn = new javax.swing.JLabel();
        muteBtn = new javax.swing.JLabel();
        saveBtn = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        enterVolValue = new javax.swing.JTextField();
        enterBtn = new javax.swing.JButton();
        volSlider = new javax.swing.JSlider();
        banjo = new javax.swing.JToggleButton();
        guitar = new javax.swing.JToggleButton();
        guitar1 = new javax.swing.JToggleButton();
        guitar2 = new javax.swing.JToggleButton();
        cKey = new javax.swing.JButton();
        dKey = new javax.swing.JButton();
        eKey = new javax.swing.JButton();
        fKey = new javax.swing.JButton();
        gKey = new javax.swing.JButton();
        aKey = new javax.swing.JButton();
        cSharp = new javax.swing.JButton();
        dSharp = new javax.swing.JButton();
        fSharp = new javax.swing.JButton();
        gSharp = new javax.swing.JButton();
        bKey = new javax.swing.JButton();
        highCKey = new javax.swing.JButton();
        aSharp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1000, 492));

        jPanel1.setBackground(new java.awt.Color(80, 80, 80));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        headerPanel.setBackground(new java.awt.Color(80, 80, 80));
        headerPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 250, 250), 1, true));

        apptitle.setBackground(new java.awt.Color(102, 102, 102));
        apptitle.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        apptitle.setForeground(new java.awt.Color(102, 250, 250));
        apptitle.setText("   Desk Music Studio");
        apptitle.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(".AppleSystemUIFont", 1, 13), new java.awt.Color(102, 102, 102))); // NOI18N
        apptitle.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                apptitleMouseDragged(evt);
            }
        });
        apptitle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                apptitleMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                apptitleMousePressed(evt);
            }
        });

        quitBtn.setBackground(new java.awt.Color(102, 102, 102));
        quitBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        quitBtn.setForeground(new java.awt.Color(102, 250, 250));
        quitBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        quitBtn.setText("Quit");
        quitBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(102, 102, 102), null, null));
        quitBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quitBtnMouseClicked(evt);
            }
        });

        settingBtn.setBackground(new java.awt.Color(102, 102, 102));
        settingBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        settingBtn.setForeground(new java.awt.Color(102, 250, 250));
        settingBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        settingBtn.setText("Settings");
        settingBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(102, 102, 102), null, null));
        settingBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                settingBtnMouseClicked(evt);
            }
        });

        TrackViewName.setBackground(new java.awt.Color(102, 102, 102));
        TrackViewName.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        TrackViewName.setForeground(new java.awt.Color(102, 250, 250));
        TrackViewName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TrackViewName.setText("Track View");
        TrackViewName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(102, 102, 102))); // NOI18N

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(apptitle, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(687, 687, 687)
                .addComponent(TrackViewName, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 701, Short.MAX_VALUE)
                .addComponent(settingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(apptitle)
                        .addComponent(settingBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(quitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                        .addGap(0, 12, Short.MAX_VALUE)
                        .addComponent(TrackViewName, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        apptitle.getAccessibleContext().setAccessibleName("Desk Music Studio");

        jPanel1.add(headerPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1920, -1));

        songNameMainPanel.setBackground(new java.awt.Color(50, 50, 50));

        songNameSubPanel.setBackground(new java.awt.Color(80, 80, 80));
        songNameSubPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 250, 250), 1, true));

        songNameDisplay.setBackground(new java.awt.Color(50, 50, 50));
        songNameDisplay.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        songNameDisplay.setForeground(new java.awt.Color(102, 250, 250));
        songNameDisplay.setText("Playing");
        songNameDisplay.setMaximumSize(new java.awt.Dimension(50, 16));
        songNameDisplay.setMinimumSize(new java.awt.Dimension(50, 16));

        javax.swing.GroupLayout songNameSubPanelLayout = new javax.swing.GroupLayout(songNameSubPanel);
        songNameSubPanel.setLayout(songNameSubPanelLayout);
        songNameSubPanelLayout.setHorizontalGroup(
            songNameSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(songNameSubPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(songNameDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1313, Short.MAX_VALUE))
        );
        songNameSubPanelLayout.setVerticalGroup(
            songNameSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(songNameDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout songNameMainPanelLayout = new javax.swing.GroupLayout(songNameMainPanel);
        songNameMainPanel.setLayout(songNameMainPanelLayout);
        songNameMainPanelLayout.setHorizontalGroup(
            songNameMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1920, Short.MAX_VALUE)
            .addGroup(songNameMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(songNameMainPanelLayout.createSequentialGroup()
                    .addComponent(songNameSubPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        songNameMainPanelLayout.setVerticalGroup(
            songNameMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
            .addGroup(songNameMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(songNameMainPanelLayout.createSequentialGroup()
                    .addComponent(songNameSubPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel1.add(songNameMainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 51, -1, -1));

        controlPanel.setBackground(new java.awt.Color(80, 80, 80));
        controlPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 250, 250), new java.awt.Color(102, 250, 250)));
        controlPanel.setPreferredSize(new java.awt.Dimension(1920, 1040));

        loadBtn.setBackground(new java.awt.Color(102, 102, 102));
        loadBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        loadBtn.setForeground(new java.awt.Color(102, 250, 250));
        loadBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loadBtn.setText("Load");
        loadBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(102, 102, 102), null, null));
        loadBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadBtnMouseClicked(evt);
            }
        });

        repeatBtn.setBackground(new java.awt.Color(102, 102, 102));
        repeatBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        repeatBtn.setForeground(new java.awt.Color(102, 250, 250));
        repeatBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        repeatBtn.setText("loop");
        repeatBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 153, 153), null, null));
        repeatBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                repeatBtnMouseClicked(evt);
            }
        });

        playBtn.setBackground(new java.awt.Color(102, 102, 102));
        playBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        playBtn.setForeground(new java.awt.Color(102, 250, 250));
        playBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playBtn.setText("play");
        playBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 153, 153), null, null));
        playBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playBtnMouseClicked(evt);
            }
        });

        pauseBtn.setBackground(new java.awt.Color(102, 102, 102));
        pauseBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        pauseBtn.setForeground(new java.awt.Color(102, 250, 250));
        pauseBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pauseBtn.setText("pause");
        pauseBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 153, 153), null, null));
        pauseBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pauseBtnMouseClicked(evt);
            }
        });

        stopBtn.setBackground(new java.awt.Color(102, 102, 102));
        stopBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        stopBtn.setForeground(new java.awt.Color(102, 250, 250));
        stopBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stopBtn.setText("restart");
        stopBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 153, 153), null, null));
        stopBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopBtnMouseClicked(evt);
            }
        });

        volumedownBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        volumedownBtn.setForeground(new java.awt.Color(102, 250, 250));
        volumedownBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        volumedownBtn.setText("volume down");
        volumedownBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 153, 153), null, null));
        volumedownBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                volumedownBtnMouseClicked(evt);
            }
        });

        volumeupBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        volumeupBtn.setForeground(new java.awt.Color(102, 250, 250));
        volumeupBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        volumeupBtn.setText("volume up");
        volumeupBtn.setToolTipText("");
        volumeupBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 153, 153), null, null));
        volumeupBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                volumeupBtnMouseClicked(evt);
            }
        });

        volumefullBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        volumefullBtn.setForeground(new java.awt.Color(102, 250, 250));
        volumefullBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        volumefullBtn.setText("max");
        volumefullBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 153, 153), null, null));
        volumefullBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                volumefullBtnMouseClicked(evt);
            }
        });

        muteBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        muteBtn.setForeground(new java.awt.Color(102, 250, 250));
        muteBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        muteBtn.setText("mute");
        muteBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 153, 153), null, null));
        muteBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                muteBtnMouseClicked(evt);
            }
        });

        saveBtn.setBackground(new java.awt.Color(102, 102, 102));
        saveBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        saveBtn.setForeground(new java.awt.Color(102, 250, 250));
        saveBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saveBtn.setText("Save");
        saveBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(102, 102, 102), null, null));
        saveBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveBtnMouseClicked(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(102, 102, 102));
        jLabel1.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Section View");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 250, 250)));

        enterVolValue.setBackground(new java.awt.Color(102, 102, 102));
        enterVolValue.setForeground(new java.awt.Color(102, 255, 255));

        enterBtn.setBackground(new java.awt.Color(0, 0, 0));
        enterBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        enterBtn.setForeground(new java.awt.Color(102, 255, 255));
        enterBtn.setText("Enter");
        enterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterBtnActionPerformed(evt);
            }
        });

        volSlider.setBackground(new java.awt.Color(255, 255, 255));
        volSlider.setForeground(new java.awt.Color(102, 255, 255));
        volSlider.setMajorTickSpacing(20);
        volSlider.setMinorTickSpacing(5);
        volSlider.setPaintLabels(true);
        volSlider.setPaintTicks(true);
        volSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                volSliderStateChanged(evt);
            }
        });

        banjo.setBackground(new java.awt.Color(255, 255, 255));
        banjo.setIcon(new javax.swing.ImageIcon("/Users/adrian/Downloads/banjo.png")); // NOI18N

        guitar.setBackground(new java.awt.Color(255, 255, 255));
        guitar.setIcon(new javax.swing.ImageIcon("/Users/adrian/Downloads/Guitar.png")); // NOI18N
        guitar.setSize(new java.awt.Dimension(140, 29));

        guitar1.setBackground(new java.awt.Color(255, 255, 255));
        guitar1.setIcon(new javax.swing.ImageIcon("/Users/adrian/Downloads/Piano.png")); // NOI18N
        guitar1.setSize(new java.awt.Dimension(140, 29));

        guitar2.setBackground(new java.awt.Color(255, 255, 255));
        guitar2.setIcon(new javax.swing.ImageIcon("/Users/adrian/Downloads/Violin.png")); // NOI18N
        guitar2.setSize(new java.awt.Dimension(140, 29));

        cKey.setBackground(new java.awt.Color(255, 255, 255));
        cKey.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        cKey.setText("C");
        cKey.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        cKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cKeyActionPerformed(evt);
            }
        });

        dKey.setBackground(new java.awt.Color(255, 255, 255));
        dKey.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        dKey.setText("D");
        dKey.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        dKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dKeyActionPerformed(evt);
            }
        });

        eKey.setBackground(new java.awt.Color(255, 255, 255));
        eKey.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        eKey.setText("E");
        eKey.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        eKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eKeyActionPerformed(evt);
            }
        });

        fKey.setBackground(new java.awt.Color(255, 255, 255));
        fKey.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        fKey.setText("F");
        fKey.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        fKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fKeyActionPerformed(evt);
            }
        });

        gKey.setBackground(new java.awt.Color(255, 255, 255));
        gKey.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        gKey.setText("G");
        gKey.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        gKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gKeyActionPerformed(evt);
            }
        });

        aKey.setBackground(new java.awt.Color(255, 255, 255));
        aKey.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        aKey.setText("A");
        aKey.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        aKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aKeyActionPerformed(evt);
            }
        });

        cSharp.setBackground(new java.awt.Color(0, 0, 0));
        cSharp.setForeground(new java.awt.Color(255, 255, 255));
        cSharp.setText("C#");
        cSharp.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        cSharp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cSharpActionPerformed(evt);
            }
        });

        dSharp.setBackground(new java.awt.Color(0, 0, 0));
        dSharp.setForeground(new java.awt.Color(255, 255, 255));
        dSharp.setText("D#");
        dSharp.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        dSharp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dSharpActionPerformed(evt);
            }
        });

        fSharp.setBackground(new java.awt.Color(0, 0, 0));
        fSharp.setForeground(new java.awt.Color(255, 255, 255));
        fSharp.setText("F#");
        fSharp.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        fSharp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fSharpActionPerformed(evt);
            }
        });

        gSharp.setBackground(new java.awt.Color(0, 0, 0));
        gSharp.setForeground(new java.awt.Color(255, 255, 255));
        gSharp.setText("G#");
        gSharp.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        gSharp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gSharpActionPerformed(evt);
            }
        });

        bKey.setBackground(new java.awt.Color(255, 255, 255));
        bKey.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        bKey.setText("B");
        bKey.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bKeyActionPerformed(evt);
            }
        });

        highCKey.setBackground(new java.awt.Color(255, 255, 255));
        highCKey.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        highCKey.setText("C6");
        highCKey.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        highCKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highCKeyActionPerformed(evt);
            }
        });

        aSharp.setBackground(new java.awt.Color(0, 0, 0));
        aSharp.setForeground(new java.awt.Color(255, 255, 255));
        aSharp.setText("A#");
        aSharp.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        aSharp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aSharpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(loadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addGap(216, 216, 216)
                                .addComponent(volSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(enterVolValue, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(enterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(230, 230, 230)
                                .addComponent(stopBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(repeatBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pauseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(373, 373, 373)
                                .addComponent(muteBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(volumedownBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(volumeupBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(volumefullBtn))
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addComponent(cKey, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cSharp, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dKey, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dSharp, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eKey, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fKey, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fSharp, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gKey, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gSharp, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aKey, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aSharp, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 217, Short.MAX_VALUE))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(bKey, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(highCKey, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(guitar2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guitar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(banjo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guitar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveBtn)
                    .addComponent(loadBtn))
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(muteBtn)
                            .addComponent(volumedownBtn)
                            .addComponent(volumeupBtn)
                            .addComponent(volumefullBtn))
                        .addGap(22, 22, 22))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(banjo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guitar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(guitar2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guitar1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(volSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enterVolValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stopBtn)
                            .addComponent(repeatBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pauseBtn)
                            .addComponent(playBtn))))
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cKey, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dKey, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(eKey, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fKey, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(gKey, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(aKey, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bKey, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(highCKey, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cSharp, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dSharp, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aSharp, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gSharp, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fSharp, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3958, 3958, 3958))
        );

        jPanel1.add(controlPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 1920, 1050));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void playBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playBtnMouseClicked
        // TODO add your handling code here:
        user.play();
    }//GEN-LAST:event_playBtnMouseClicked

    private void stopBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopBtnMouseClicked
        // TODO add your handling code here:
        user.stop();
    }//GEN-LAST:event_stopBtnMouseClicked

    private void pauseBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pauseBtnMouseClicked
        // TODO add your handling code here:
        user.pause();
    }//GEN-LAST:event_pauseBtnMouseClicked

    private void repeatBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_repeatBtnMouseClicked
        // TODO add your handling code here:
        if (repeat == false) {
            repeat = true;
            user.setRepeat(repeat);
            
          String image = currentPath + imagePath + "\\repeatBtn.png";
          repeatBtn.setIcon(new ImageIcon(image));       
        } 
        else if (repeat == true) {
            repeat = false;
            user.setRepeat(repeat);
            
            String image = currentPath + imagePath + "\\repeat.png";
            repeatBtn.setIcon(new ImageIcon(image));
        }
    }//GEN-LAST:event_repeatBtnMouseClicked

    private void apptitleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apptitleMousePressed
        // TODO add your handling code here:
        xM = evt.getX();
        yM = evt.getY();
    }//GEN-LAST:event_apptitleMousePressed

    private void apptitleMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apptitleMouseDragged
        // TODO add your handling code here:
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        
        this.setLocation(x - xM, y - yM);
    }//GEN-LAST:event_apptitleMouseDragged

    private void quitBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quitBtnMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_quitBtnMouseClicked

    private void settingBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingBtnMouseClicked
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Settings dialog will display here");
    }//GEN-LAST:event_settingBtnMouseClicked

    private void loadBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadBtnMouseClicked
        // TODO add your handling code here:
            JFileChooser loadfileChooser = new JFileChooser(currentDirectory);
            loadfileChooser.setDialogTitle("Load");
            loadfileChooser.setFileFilter(new fileFilter(".mp3", "MP3 file type"));
            //openfileChooser.setFileFilter(new FileTypeFilter(".spc", "SPC file type"));
            int result = loadfileChooser.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                songFile = loadfileChooser.getSelectedFile();
                user.addToPlayList(songFile);
                user.skipForward();
                currentDirectory = songFile.getAbsolutePath();
                songNameDisplay.setText("Playing ... " + songFile.getName());
            } 
    }//GEN-LAST:event_loadBtnMouseClicked

    private void apptitleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apptitleMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            if (windowCollasped == false) {
                windowCollasped = true;
                this.setSize(new Dimension(this.getSize().width, 50));
                
                apptitle.setFont(new Font(".AppleSystemUIFont", 0, 12));
                apptitle.setText("Playing...  " + songFile.getName());
            } else if (windowCollasped == true) {
                windowCollasped = false;
                this.setSize(new Dimension(this.getSize().width, 250));
                
                apptitle.setFont(new Font(".AppleSystemUIFont", 0, 10));
                apptitle.setText(applicationName);
            }
        }
    }//GEN-LAST:event_apptitleMouseClicked

    private void volumedownBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volumedownBtnMouseClicked
        // TODO add your handling code here:
        volumedownControl(0.1);
    }//GEN-LAST:event_volumedownBtnMouseClicked

    private void volumeupBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volumeupBtnMouseClicked
        // TODO add your handling code here:
        volumeupControl(0.1);
    }//GEN-LAST:event_volumeupBtnMouseClicked

    private void volumefullBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volumefullBtnMouseClicked
        // TODO add your handling code here:
        volumeControl(1.0);
    }//GEN-LAST:event_volumefullBtnMouseClicked

    private void muteBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_muteBtnMouseClicked
        // TODO add your handling code here:
        volumeControl(0.0);
    }//GEN-LAST:event_muteBtnMouseClicked

    private void saveBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBtnMouseClicked
        // TODO add your handling code here:
        // JFileChooser to browse File or save File
        JFileChooser SaveFileChooser = new JFileChooser("home.user");
        // set JFileChooser Title
        SaveFileChooser.setDialogTitle("Save file!");
        // set JFileChooser Filter From our newly created class
        SaveFileChooser.setFileFilter(new fileFilter(".mp3", "MP3 File Only"));
        // store result in to INT
        int result = SaveFileChooser.showSaveDialog(null);
        // check if result returns APPROVED
        if (result == JFileChooser.APPROVE_OPTION) {
           // get selected file
           File fileToSave;
            fileToSave = SaveFileChooser.getSelectedFile();
        // Now use exception to store File
          try{
              // write file writer to write that text into file
              FileWriter fileWriter = new FileWriter(fileToSave.getPath());
              // now flush the cache file
              fileWriter.flush();
              // and close FileWriter
              fileWriter.close();
          }catch (Exception exception) {
               JOptionPane.showMessageDialog(this, "File Error: " + exception.getMessage());
          }
        }
    }//GEN-LAST:event_saveBtnMouseClicked

    private void enterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterBtnActionPerformed
        // TODO add your handling code here:
        int value = Integer.parseInt(enterVolValue.getText());
        volSlider.setValue(value);
    }//GEN-LAST:event_enterBtnActionPerformed
   
    private void volSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_volSliderStateChanged
        // TODO add your handling code here:
       //volSlider.addChangeListener((ChangeListener) evt);
       if (!volSlider.getValueIsAdjusting())
           return;
       
    }//GEN-LAST:event_volSliderStateChanged

    private void cKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cKeyActionPerformed
        // TODO add your handling code here:
        panel.add(cKey, 0, -1);
        if(evt.getSource()==cKey) {
            player.play("Ch");
        }
    }//GEN-LAST:event_cKeyActionPerformed

    private void dKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dKeyActionPerformed
        // TODO add your handling code here:
        panel.add(dKey, 0, -1);
        if(evt.getSource()==dKey) {
            player.play("Dh");
        }
    }//GEN-LAST:event_dKeyActionPerformed

    private void eKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eKeyActionPerformed
        // TODO add your handling code here:
        panel.add(eKey, 0, -1);
        if(evt.getSource()==eKey) {
            player.play("E");
        }
    }//GEN-LAST:event_eKeyActionPerformed

    private void fKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fKeyActionPerformed
        // TODO add your handling code here:
        panel.add(fKey, 0, -1);
        if(evt.getSource()==fKey) {
            player.play("F");
        }

    }//GEN-LAST:event_fKeyActionPerformed

    private void gKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gKeyActionPerformed
        // TODO add your handling code here:
        panel.add(gKey, 0, -1);
        if(evt.getSource()==gKey) {
            player.play("G");
        }
    }//GEN-LAST:event_gKeyActionPerformed

    private void aKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aKeyActionPerformed
        // TODO add your handling code here:
        panel.add(aKey, 0, -1);
        if(evt.getSource()==aKey) {
            player.play("A");
        }
    }//GEN-LAST:event_aKeyActionPerformed

    private void bKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bKeyActionPerformed
        // TODO add your handling code here:
        panel.add(bKey, 0, -1);
        if(evt.getSource()==bKey) {
            player.play("B");
        }
    }//GEN-LAST:event_bKeyActionPerformed

    private void highCKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highCKeyActionPerformed
        // TODO add your handling code here:
        panel.add(highCKey, 0, -1);
        if(evt.getSource()==highCKey) {
            player.play("C6");
        }
    }//GEN-LAST:event_highCKeyActionPerformed

    private void cSharpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cSharpActionPerformed
        // TODO add your handling code here:
         panel.add(cSharp, 1, -1);
        if(evt.getSource()==cSharp) {
            player.play("C#");
        }
    }//GEN-LAST:event_cSharpActionPerformed

    private void dSharpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dSharpActionPerformed
        // TODO add your handling code here:
        panel.add(dSharp, 1, -1);
        if(evt.getSource()==dSharp) {
            player.play("D#");
        }
    }//GEN-LAST:event_dSharpActionPerformed

    private void fSharpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fSharpActionPerformed
        // TODO add your handling code here:
        panel.add(fSharp, 1, -1);
        if(evt.getSource()==fSharp) {
            player.play("F#");
        }
    }//GEN-LAST:event_fSharpActionPerformed

    private void gSharpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gSharpActionPerformed
        // TODO add your handling code here:
        panel.add(gSharp, 1, -1);
        if(evt.getSource()==gSharp) {
            player.play("G#");
        }
    }//GEN-LAST:event_gSharpActionPerformed

    private void aSharpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aSharpActionPerformed
        // TODO add your handling code here:
        panel.add(aSharp, 1, -1);
        if(evt.getSource()==aSharp) {
            player.play("A#");
        }
    }//GEN-LAST:event_aSharpActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Set the Nimbus look and feel
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(deskMusicStudio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(deskMusicStudio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(deskMusicStudio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(deskMusicStudio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new deskMusicStudio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TrackViewName;
    private javax.swing.JButton aKey;
    private javax.swing.JButton aSharp;
    private javax.swing.JLabel apptitle;
    private javax.swing.JButton bKey;
    private javax.swing.JToggleButton banjo;
    private javax.swing.JButton cKey;
    private javax.swing.JButton cSharp;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JButton dKey;
    private javax.swing.JButton dSharp;
    private javax.swing.JButton eKey;
    private javax.swing.JButton enterBtn;
    private javax.swing.JTextField enterVolValue;
    private javax.swing.JButton fKey;
    private javax.swing.JButton fSharp;
    private javax.swing.JButton gKey;
    private javax.swing.JButton gSharp;
    private javax.swing.JToggleButton guitar;
    private javax.swing.JToggleButton guitar1;
    private javax.swing.JToggleButton guitar2;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JButton highCKey;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JLabel loadBtn;
    private javax.swing.JLabel muteBtn;
    private javax.swing.JLabel pauseBtn;
    private javax.swing.JLabel playBtn;
    private javax.swing.JLabel quitBtn;
    private javax.swing.JLabel repeatBtn;
    private javax.swing.JLabel saveBtn;
    private javax.swing.JLabel settingBtn;
    private javax.swing.JLabel songNameDisplay;
    private javax.swing.JPanel songNameMainPanel;
    private javax.swing.JPanel songNameSubPanel;
    private javax.swing.JLabel stopBtn;
    public javax.swing.JSlider volSlider;
    private javax.swing.JLabel volumedownBtn;
    private javax.swing.JLabel volumefullBtn;
    private javax.swing.JLabel volumeupBtn;
    // End of variables declaration//GEN-END:variables

    // custom private declaration for mp3 method
    private MP3Player mp3Player() {
        MP3Player mp3Player = new MP3Player();
        return mp3Player;
    }
    
    // custom private declaration for lowering volume
    private void volumedownControl(Double valueToPlusMinus) {
        // calling for mixer information in AudioSystem
        Mixer.Info[] mixers = AudioSystem.getMixerInfo();
        // for loop to list all mixers
        for (Mixer.Info mixerInfo : mixers) {
            // get mixer
            Mixer mixer = AudioSystem.getMixer(mixerInfo);
            // calling for target line
            Line.Info[] lineInfos = mixer.getTargetLineInfo();
            // for loop to list target lines
            for (Line.Info lineInfo : lineInfos) {
                // starts at index
                Line line = null;
                boolean opened = true;
               // try-catch method
               try {
                   line = mixer.getLine(lineInfo);
                   opened = line.isOpen() || line instanceof Clip;
                   // if statement
                   if (!opened) {
                       line.open(); // void
                   }
                   // float variable for volume control
                   FloatControl volumeControl = (FloatControl) line.getControl(FloatControl.Type.VOLUME);
                   // current volume control
                   float currentVolume = volumeControl.getValue();
                   // double variable to store valuePlusMinus
                   Double volumeToCut = valueToPlusMinus;
                   // float variable to determine volume level increase or decrease
                   float changedCalc = (float) ((float)currentVolume - (double)volumeToCut);
                   volumeControl.setValue(changedCalc);
               } catch (LineUnavailableException lineException) {
               
               } catch (IllegalArgumentException illException) {
               
               } finally {
                   // close line if it is open
                   if (line != null && !opened) {
                       line.close();
                   }
               }
            }
        }
    }
    // custom private declaration for increasing volume
    private void volumeupControl(Double valueToPlusMinus) {
        // calling for mixer information in AudioSystem
        Mixer.Info[] mixers = AudioSystem.getMixerInfo();
        // for loop to list all mixers
        for (Mixer.Info mixerInfo : mixers) {
            // get mixer
            Mixer mixer = AudioSystem.getMixer(mixerInfo);
            // calling for target line
            Line.Info[] lineInfos = mixer.getTargetLineInfo();
            // for loop to list target lines
            for (Line.Info lineInfo : lineInfos) {
                // starts at index
                Line line = null;
                boolean opened = true;
               // try-catch method
               try {
                   line = mixer.getLine(lineInfo);
                   opened = line.isOpen() || line instanceof Clip;
                   // if statement
                   if (!opened) {
                       line.open(); // void
                   }
                   // float variable for volume control
                   FloatControl volumeControl = (FloatControl) line.getControl(FloatControl.Type.VOLUME);
                   // current volume control
                   float currentVolume = volumeControl.getValue();
                   // double variable to store valuePlusMinus
                   Double volumeToCut = valueToPlusMinus;
                   // float variable to determine volume level increase or decrease
                   float changedCalc = (float) ((float)currentVolume + (double)volumeToCut);
                   volumeControl.setValue(changedCalc);
               } catch (LineUnavailableException lineException) {
               
               } catch (IllegalArgumentException illException) {
               
               } finally {
                   // close line if it is open
                   if (line != null && !opened) {
                       line.close();
                   }
               }
                
            }
        }
    }
    // custom private declaration volume in general
    private void volumeControl(Double valueToPlusMinus) {
        // calling for mixer information in AudioSystem
        Mixer.Info[] mixers = AudioSystem.getMixerInfo();
        // for loop to list all mixers
        for (Mixer.Info mixerInfo : mixers) {
            // get mixer
            Mixer mixer = AudioSystem.getMixer(mixerInfo);
            // calling for target line
            Line.Info[] lineInfos = mixer.getTargetLineInfo();
            // for loop to list target lines
            for (Line.Info lineInfo : lineInfos) {
                // starts at index
                Line line = null;
                boolean opened = true;
               // try-catch method
               try {
                   line = mixer.getLine(lineInfo);
                   opened = line.isOpen() || line instanceof Clip;
                   // if statement
                   if (!opened) {
                       line.open(); // void
                   }
                   // float variable for volume control
                   FloatControl volumeControl = (FloatControl) line.getControl(FloatControl.Type.VOLUME);
                   // current volume control
                   float currentVolume = volumeControl.getValue();
                   // double variable to store valuePlusMinus
                   Double volumeToCut = valueToPlusMinus;
                   // float variable to determine volume level increase or decrease
                   float changedCalc = (float) ((double)volumeToCut);
                   volumeControl.setValue(changedCalc);
               } catch (LineUnavailableException lineException) {
               
               } catch (IllegalArgumentException illException) {
               
               } finally {
                   // close line if it is open
                   if (line != null && !opened) {
                       line.close();
                   }
               }
                
            }
        }
    }
}
